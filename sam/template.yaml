AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template replicating Terraform-managed VPC, S3 bucket, VPC endpoints, Lambda layer and function for 'dev' stage.

Parameters:
  Stage:
    Type: String
    Default: dev
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16

Globals:
  Function:
    Timeout: 30

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

      Tags:
        - Key: Stage
          Value: !Ref Stage

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-private-subnet-a'

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub '${Stage}-private-subnet-b'

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Default security group for VPC
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aws-vpc-lambda-integration-${Stage}'
      VersioningConfiguration:
        Status: Enabled

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetARouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  SubnetBRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Join ['', [ !GetAtt S3Bucket.Arn, '/*' ]]

  VPCEndpointLambda:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.lambda'
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
      SecurityGroupIds:
        - !Ref DefaultSecurityGroup

  MyLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${Stage}-my-lambda-layer'
      Description: Dependencies layer
      ContentUri: layer.zip
      CompatibleRuntimes:
        - python3.13
    

  MyLambda:
    Type: AWS::Serverless::Function
    DependsOn: MyLambdaLayer
    Properties:
      FunctionName: !Sub '${Stage}-my-lambda-fn'
      Handler: lambda_function.lambda_handler
      Runtime: python3.13
      CodeUri: lambda.zip
      Layers:
        - !Ref MyLambdaLayer
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        SecurityGroupIds:
          - !Ref DefaultSecurityGroup
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket


Outputs:
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt MyLambda.Arn
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref S3Bucket
